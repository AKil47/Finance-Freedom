# -*- coding: utf-8 -*-
"""TickersOnTwitter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kRaU5DfhxYXgXRG_fare50uEtKz1h7wT
"""

# twitter sentiment analysis
import tweepy
from textblob import TextBlob
import re 
import pandas as pd

# Twitter API Credentials
consumerKey = "qT6FW61JDZTFlBetQE4ClswMr"
consumerSecret = "xaK5NgoplobsYGexyVqkXFbGHj7Zwb87BN92zLMlvmvMNrqD4K"
accessToken = "1212555051933155328-5leWwyt1pOradkBFKjy189c7URubEM"
accessTokenSecret = "cgyFGIjGNeghqx5k8kLX5hfiJAHKessZugl3gacFZR3Jj"

# Create the authentication object
authenticate = tweepy.OAuthHandler(consumerKey, consumerSecret)
# Set the access token and access token secrete
authenticate.set_access_token(accessToken, accessTokenSecret)
# Create the API object while passing in the auth info
api = tweepy.API(authenticate, wait_on_rate_limit = True)


# Clean a function to clean tweets 
def cleanTweets(tweet, ticker):
  # Removes hashtags
  hashtag = f"#{ticker}"
  tweet = re.sub(hashtag , ticker, tweet)
  tweet = re.sub(hashtag, ticker.capitalize(), tweet)
  tweet = re.sub('#[A-Za-z0-9]+', '', tweet)
  # Removes \n and hyperlinks
  tweet = re.sub('\\n', '', tweet)
  tweet = re.sub('https?:\/\/S+', '', tweet)
  return tweet

# Create a function to get the polarity
def getPolarity(tweet):
  return TextBlob(tweet).sentiment.polarity

def avg_score(df):
  # Create columns called "Polarity"
  df['Polarity'] = df['Cleaned_Tweets'].apply(getPolarity)
  scores = df['Polarity']
  avg = sum(scores)/len(scores)
  return avg

def get_score(ticker):
  # Gather 20 tweets about ticker and filter out rts
  search_term = f"#{ticker} -filter:retweets"

  # Create cursor object
  tweets = tweepy.Cursor(api.search_tweets, q=search_term, lang="en", since="2018-11-01", tweet_mode="extended").items(20)

  # Store the tweets in a variable and get the full text 
  all_tweets = [tweet.full_text for tweet in tweets]

  df = pd.DataFrame(all_tweets, columns=['Tweets'])
  df['Cleaned_Tweets'] = df['Tweets'].apply(lambda tweet: cleanTweets(tweet, ticker))
  return avg_score(df)